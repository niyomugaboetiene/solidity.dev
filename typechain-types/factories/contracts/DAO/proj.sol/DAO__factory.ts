/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { DAO, DAOInterface } from "../../../../contracts/DAO/proj.sol/DAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "CreateProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "Vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610d0d8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063013cf08b146100515780636d9a483414610083578063dcd6a5cd1461009f578063fe0d94c1146100bb575b600080fd5b61006b60048036038101906100669190610514565b6100d7565b60405161007a939291906105fb565b60405180910390f35b61009d6004803603810190610098919061076e565b6101a6565b005b6100b960048036038101906100b49190610514565b610235565b005b6100d560048036038101906100d09190610514565b6103a0565b005b600081815481106100e757600080fd5b906000526020600020906003020160009150905080600001805461010a906107e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610136906107e6565b80156101835780601f1061015857610100808354040283529160200191610183565b820191906000526020600020905b81548152906001019060200180831161016657829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16905083565b6000604051806060016040528083815260200160008152602001600015158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908161020591906109c3565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990610ae1565b60405180910390fd5b6000805490508110610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030090610b4d565b60405180910390fd5b60016000828154811061031f5761031e610b6d565b5b9060005260206000209060030201600101600082825461033f9190610bcb565b9250508190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600081815481106103b4576103b3610b6d565b5b906000526020600020906003020160020160009054906101000a900460ff1615610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a90610c4b565b60405180910390fd5b600080549050811061045a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045190610cb7565b60405180910390fd5b6001600082815481106104705761046f610b6d565b5b90600052602060002090600302016001015411156104c75760016000828154811061049e5761049d610b6d565b5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055505b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104f1816104de565b81146104fc57600080fd5b50565b60008135905061050e816104e8565b92915050565b60006020828403121561052a576105296104d4565b5b6000610538848285016104ff565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561057b578082015181840152602081019050610560565b60008484015250505050565b6000601f19601f8301169050919050565b60006105a382610541565b6105ad818561054c565b93506105bd81856020860161055d565b6105c681610587565b840191505092915050565b6105da816104de565b82525050565b60008115159050919050565b6105f5816105e0565b82525050565b600060608201905081810360008301526106158186610598565b905061062460208301856105d1565b61063160408301846105ec565b949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61067b82610587565b810181811067ffffffffffffffff8211171561069a57610699610643565b5b80604052505050565b60006106ad6104ca565b90506106b98282610672565b919050565b600067ffffffffffffffff8211156106d9576106d8610643565b5b6106e282610587565b9050602081019050919050565b82818337600083830152505050565b600061071161070c846106be565b6106a3565b90508281526020810184848401111561072d5761072c61063e565b5b6107388482856106ef565b509392505050565b600082601f83011261075557610754610639565b5b81356107658482602086016106fe565b91505092915050565b600060208284031215610784576107836104d4565b5b600082013567ffffffffffffffff8111156107a2576107a16104d9565b5b6107ae84828501610740565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107fe57607f821691505b602082108103610811576108106107b7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108797fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261083c565b610883868361083c565b95508019841693508086168417925050509392505050565b6000819050919050565b60006108c06108bb6108b6846104de565b61089b565b6104de565b9050919050565b6000819050919050565b6108da836108a5565b6108ee6108e6826108c7565b848454610849565b825550505050565b600090565b6109036108f6565b61090e8184846108d1565b505050565b5b81811015610932576109276000826108fb565b600181019050610914565b5050565b601f8211156109775761094881610817565b6109518461082c565b81016020851015610960578190505b61097461096c8561082c565b830182610913565b50505b505050565b600082821c905092915050565b600061099a6000198460080261097c565b1980831691505092915050565b60006109b38383610989565b9150826002028217905092915050565b6109cc82610541565b67ffffffffffffffff8111156109e5576109e4610643565b5b6109ef82546107e6565b6109fa828285610936565b600060209050601f831160018114610a2d5760008415610a1b578287015190505b610a2585826109a7565b865550610a8d565b601f198416610a3b86610817565b60005b82811015610a6357848901518255600182019150602085019450602081019050610a3e565b86831015610a805784890151610a7c601f891682610989565b8355505b6001600288020188555050505b505050505050565b7f416c726561647920766f74656420212100000000000000000000000000000000600082015250565b6000610acb60108361054c565b9150610ad682610a95565b602082019050919050565b60006020820190508181036000830152610afa81610abe565b9050919050565b7f496e76616c69642070726f706f73616c00000000000000000000000000000000600082015250565b6000610b3760108361054c565b9150610b4282610b01565b602082019050919050565b60006020820190508181036000830152610b6681610b2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bd6826104de565b9150610be1836104de565b9250828201905080821115610bf957610bf8610b9c565b5b92915050565b7f416c726561647920657865637574656420212100000000000000000000000000600082015250565b6000610c3560138361054c565b9150610c4082610bff565b602082019050919050565b60006020820190508181036000830152610c6481610c28565b9050919050565b7f496e76616c69642070726f706f73616c20212100000000000000000000000000600082015250565b6000610ca160138361054c565b9150610cac82610c6b565b602082019050919050565b60006020820190508181036000830152610cd081610c94565b905091905056fea2646970667358221220d8c63b7a9f3512d68cbaa5b02732177d5622704c8f73f5db1e231be93175bb7764736f6c634300081c0033";

type DAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DAO__factory extends ContractFactory {
  constructor(...args: DAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DAO__factory {
    return super.connect(runner) as DAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAOInterface {
    return new Interface(_abi) as DAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DAO {
    return new Contract(address, _abi, runner) as unknown as DAO;
  }
}
