/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { DAO, DAOInterface } from "../../../../contracts/DAO/proj.sol/DAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "CreateProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "Vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610d0c8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063013cf08b146100515780636d9a483414610083578063dcd6a5cd1461009f578063fe0d94c1146100bb575b600080fd5b61006b60048036038101906100669190610513565b6100d7565b60405161007a939291906105fa565b60405180910390f35b61009d6004803603810190610098919061076d565b6101a6565b005b6100b960048036038101906100b49190610513565b610235565b005b6100d560048036038101906100d09190610513565b6103a0565b005b600081815481106100e757600080fd5b906000526020600020906003020160009150905080600001805461010a906107e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610136906107e5565b80156101835780601f1061015857610100808354040283529160200191610183565b820191906000526020600020905b81548152906001019060200180831161016657829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16905083565b6000604051806060016040528083815260200160008152602001600015158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908161020591906109c2565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990610ae0565b60405180910390fd5b6000805490508110610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030090610b4c565b60405180910390fd5b60016000828154811061031f5761031e610b6c565b5b9060005260206000209060030201600101600082825461033f9190610bca565b9250508190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600081815481106103b4576103b3610b6c565b5b906000526020600020906003020160020160009054906101000a900460ff16610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990610c4a565b60405180910390fd5b6000805490508110610459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045090610cb6565b60405180910390fd5b60016000828154811061046f5761046e610b6c565b5b90600052602060002090600302016001015411156104c65760016000828154811061049d5761049c610b6c565b5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055505b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104f0816104dd565b81146104fb57600080fd5b50565b60008135905061050d816104e7565b92915050565b600060208284031215610529576105286104d3565b5b6000610537848285016104fe565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561057a57808201518184015260208101905061055f565b60008484015250505050565b6000601f19601f8301169050919050565b60006105a282610540565b6105ac818561054b565b93506105bc81856020860161055c565b6105c581610586565b840191505092915050565b6105d9816104dd565b82525050565b60008115159050919050565b6105f4816105df565b82525050565b600060608201905081810360008301526106148186610597565b905061062360208301856105d0565b61063060408301846105eb565b949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61067a82610586565b810181811067ffffffffffffffff8211171561069957610698610642565b5b80604052505050565b60006106ac6104c9565b90506106b88282610671565b919050565b600067ffffffffffffffff8211156106d8576106d7610642565b5b6106e182610586565b9050602081019050919050565b82818337600083830152505050565b600061071061070b846106bd565b6106a2565b90508281526020810184848401111561072c5761072b61063d565b5b6107378482856106ee565b509392505050565b600082601f83011261075457610753610638565b5b81356107648482602086016106fd565b91505092915050565b600060208284031215610783576107826104d3565b5b600082013567ffffffffffffffff8111156107a1576107a06104d8565b5b6107ad8482850161073f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107fd57607f821691505b6020821081036108105761080f6107b6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261083b565b610882868361083b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006108bf6108ba6108b5846104dd565b61089a565b6104dd565b9050919050565b6000819050919050565b6108d9836108a4565b6108ed6108e5826108c6565b848454610848565b825550505050565b600090565b6109026108f5565b61090d8184846108d0565b505050565b5b81811015610931576109266000826108fa565b600181019050610913565b5050565b601f8211156109765761094781610816565b6109508461082b565b8101602085101561095f578190505b61097361096b8561082b565b830182610912565b50505b505050565b600082821c905092915050565b60006109996000198460080261097b565b1980831691505092915050565b60006109b28383610988565b9150826002028217905092915050565b6109cb82610540565b67ffffffffffffffff8111156109e4576109e3610642565b5b6109ee82546107e5565b6109f9828285610935565b600060209050601f831160018114610a2c5760008415610a1a578287015190505b610a2485826109a6565b865550610a8c565b601f198416610a3a86610816565b60005b82811015610a6257848901518255600182019150602085019450602081019050610a3d565b86831015610a7f5784890151610a7b601f891682610988565b8355505b6001600288020188555050505b505050505050565b7f416c726561647920766f74656420212100000000000000000000000000000000600082015250565b6000610aca60108361054b565b9150610ad582610a94565b602082019050919050565b60006020820190508181036000830152610af981610abd565b9050919050565b7f496e76616c69642070726f706f73616c00000000000000000000000000000000600082015250565b6000610b3660108361054b565b9150610b4182610b00565b602082019050919050565b60006020820190508181036000830152610b6581610b29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bd5826104dd565b9150610be0836104dd565b9250828201905080821115610bf857610bf7610b9b565b5b92915050565b7f416c726561647920657865637574656420212100000000000000000000000000600082015250565b6000610c3460138361054b565b9150610c3f82610bfe565b602082019050919050565b60006020820190508181036000830152610c6381610c27565b9050919050565b7f496e76616c69642070726f706f73616c20212100000000000000000000000000600082015250565b6000610ca060138361054b565b9150610cab82610c6a565b602082019050919050565b60006020820190508181036000830152610ccf81610c93565b905091905056fea2646970667358221220813bd4065e8ba8b474416cc11170e0e3d57741b48af874faa03965a6d58bc86c64736f6c634300081c0033";

type DAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DAO__factory extends ContractFactory {
  constructor(...args: DAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DAO__factory {
    return super.connect(runner) as DAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAOInterface {
    return new Interface(_abi) as DAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DAO {
    return new Contract(address, _abi, runner) as unknown as DAO;
  }
}
